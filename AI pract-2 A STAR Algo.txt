class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, node):
        return self.adjacency_list[node]

    def h(self, n):
        # Heuristic function (can be updated as needed)
        H = {
            'A': 3,
            'B': 2,
            'C': 4,
            'D': 0
        }
        return H[n]

    def a_star_algorithm(self, start_node, stop_node):
        open_list = set([start_node])
        closed_list = set([])

        g = {}  # Store distance from start node
        g[start_node] = 0

        parents = {}  # Parents contains an adjacency map of all nodes
        parents[start_node] = start_node

        while open_list:
            n = None

            # node with the lowest f() = g() + h()
            for v in open_list:
                if n is None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v

            if n is None:
                print('Path does not exist!')
                return None

            # if the current node is the stop_node
            if n == stop_node:
                path = []
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
                path.append(start_node)
                path.reverse()

                print('Path found: {}'.format(path))
                return path

            # for all neighbors of the current node do
            for (m, weight) in self.get_neighbors(n):
                # if the current node isn't in both open_list and closed_list
                # add it to open_list and note n as its parent
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight

                # otherwise, check if it's quicker to first visit m, then n
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n

                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            # remove n from open_list, and add it to closed_list
            open_list.remove(n)
            closed_list.add(n)

        print('Path does not exist!')
        return None


# Example usage:
adjacency_list = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 3)],
    'C': [('D', 1)],
    'D': []
}

graph = Graph(adjacency_list)
graph.a_star_algorithm('A', 'D')